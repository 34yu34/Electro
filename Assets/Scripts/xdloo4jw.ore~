using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class MapGenerator : MonoBehaviour
{
    [SerializeField] private Room _startRoom;

    [SerializeField] private List<Room> _rooms;
    [SerializeField] private List<Corridor> _corridors;
    [SerializeField] private List<Junction> _junctions;

    private List<MapPiece> _allPieces = null;
    private List<MapPiece> AllPieces {
        get
        {
            return _allPieces ??= _junctions.Cast<MapPiece>()
                                     .Union(_corridors.Cast<MapPiece>())
                                     .Union(_rooms.Cast<MapPiece>())
                                     .ToList();
        }
    }

    [SerializeField] private int MaxDeepness = 4;
    [SerializeField] private float _roomSideLength;
    public float RoomSideLength => _roomSideLength;

    private Queue<MapPiece> _current_queue;
    private MapPiece _currentPiece;
    private Dictionary<Grid, MapPiece> _pieces;

    private void Start()
    {
        GenerateMap();
    }

    private void GenerateMap()
    {
        initializeData();

        if (_rooms.Count == 0 || _corridors.Count == 0)
        {
            return;
        }

        placeStartPiece();

        placeConnectedPieces();
    }

    private void initializeData()
    {
        _pieces = new Dictionary<Grid, MapPiece>();
        Grid.SideLength = _roomSideLength;
        _current_queue = new Queue<MapPiece>();
    }

    private void placeStartPiece()
    {
        _currentPiece = _startRoom.CreateCopyAt(Grid.Origin, 0, MapPieceRotation.None);
        _pieces[_currentPiece.Grid] = _currentPiece;
    }

    private void placeConnectedPieces()
    {
        while (_currentPiece.Deepness < MaxDeepness)
        {
            ConnectCurrentRoom();
            _currentPiece = _current_queue.Dequeue();
        }
    }

    private void ConnectCurrentRoom()
    {
        var grids = _currentPiece.GetAdjacentLinkableGrid();
        foreach (var grid in grids)
        {
            if (_pieces.ContainsKey(grid))
            {
                continue;
            }

            CreatePiece(grid);
        }
    }

    private void CreatePiece(Grid new_piece_grid)
    {
        var triedPieces = new List<MapPiece>();

        List<MapPiece> neighbors = GetAdjacentMapPieceFrom(new_piece_grid);

        bool ShouldIncludeRoom = neighbors.All(piece => piece.PieceType == MapPieceType.Corridor);

        MapPiece nextPiece = GetRandomNextPieces(ShouldIncludeRoom, triedPieces);
        Side sideToLink = GetSideToLink(new_piece_grid, neighbors);

        for (var rotation = MapPieceRotation.None; rotation != MapPieceRotation.FullTurn; rotation = rotation.Next())
        {
            if ((rotation.RotateSides(nextPiece.OpenSides) & sideToLink) != sideToLink)
            {
                continue;
            }

            _current_queue.Enqueue(CreateNextPiece(new_piece_grid, nextPiece, rotation));
            return;
        }

    }

    private static Side GetSideToLink(Grid new_piece_grid, List<MapPiece> neighbors)
    {
        return neighbors.Select(n => n.GetOpenedSideFor(new_piece_grid))
                                             .Aggregate(new Side(), (side, s) => side | s);
    }

    private MapPiece CreateNextPiece(Grid grid, MapPiece CopyPiece, MapPieceRotation rotation)
    {
        var piece = CopyPiece.CreateCopyAt(grid, _currentPiece.Deepness + 1, rotation); ;
        _pieces[piece.Grid] = piece;

        return _pieces[piece.Grid];
    }

    private List<MapPiece> GetAdjacentMapPieceFrom(Grid position)
    {
        return position.GetAdjacentGrid().Where(grid => _pieces.ContainsKey(grid))
                                         .Select(grid => _pieces[grid])
                                         .ToList();
    }

    private MapPiece GetRandomNextPieces(bool includesRooms, List<MapPiece> tried_pieces)
    {
        var all_potential_pieces = AllPieces.Where(piece => !tried_pieces.Contains(piece));

        if (!includesRooms)
        {
            all_potential_pieces = all_potential_pieces.Where( piece => piece.PieceType == MapPieceType.Corridor);
        }

        var list = all_potential_pieces.ToList();
            
        return list[Random.Range(0, list.Count)];
    }
}
